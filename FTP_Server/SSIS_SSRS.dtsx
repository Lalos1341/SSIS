<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="11/11/2019 5:09:59 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="MEXSIST006"
  DTS:CreatorName="MEXSIST006\emiranda"
  DTS:DTSID="{E3FC1AC9-650B-4B7C-9758-7B1E75C549D7}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="15.0.1301.433"
  DTS:LocaleID="2058"
  DTS:ObjectName="SSIS_SSRS"
  DTS:PackageType="5"
  DTS:VersionBuild="28"
  DTS:VersionGUID="{B0E017FB-D2DD-49E3-A3D4-0523DFF2C2BC}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:Variables>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{8FB9BDE3-6225-43CA-80F9-957292D90597}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="Folder_Destination">
      <DTS:VariableValue
        DTS:DataType="8">C:\SSIS_Development</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{225BB50C-EBDF-47AC-9BB4-7ECA703C89E0}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ReportParameter">
      <DTS:VariableValue
        DTS:DataType="8">1</DTS:VariableValue>
    </DTS:Variable>
    <DTS:Variable
      DTS:CreationName=""
      DTS:DTSID="{C8740C62-8B9C-4773-9E1D-089164CC748D}"
      DTS:IncludeInDebugDump="2345"
      DTS:Namespace="User"
      DTS:ObjectName="ReportPath">
      <DTS:VariableValue
        DTS:DataType="8">C:\Users\emiranda\source\repos\Reporte_prueba2_SinWizard\Reporte_prueba2_SinWizard\bin\Debug</DTS:VariableValue>
    </DTS:Variable>
  </DTS:Variables>
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\ejecutar SSRS"
      DTS:CreationName="Microsoft.ScriptTask"
      DTS:Description="Tarea Script"
      DTS:DTSID="{CA329F84-453E-48A4-B0C7-F2A2257DB8AF}"
      DTS:ExecutableType="Microsoft.ScriptTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="ejecutar SSRS"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <ScriptProject
          Name="ST_48f665c5ce7f48c1ae7ab664430e6241"
          VSTAMajorVersion="3"
          VSTAMinorVersion="0"
          Language="CSharp"
          ReadOnlyVariables="User::Folder_Destination,User::ReportParameter">
          <ProjectItem
            Name="Properties\Resources.resx"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_48f665c5ce7f48c1ae7ab664430e6241.Properties.Settings.get_Default():ST_48f665c5ce7f48c1ae7ab664430e6241.Properties.Sett" +
    "ings")]

namespace ST_48f665c5ce7f48c1ae7ab664430e6241.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}]]></ProjectItem>
          <ProjectItem
            Name="ST_48f665c5ce7f48c1ae7ab664430e6241.csproj"
            Encoding="UTF8"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{a906264a-3595-42d7-a4a4-c1ad48d1f119}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>ST_48f665c5ce7f48c1ae7ab664430e6241</RootNamespace>
    <AssemblyName>ST_48f665c5ce7f48c1ae7ab664430e6241</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
    <TargetFrameworkProfile></TargetFrameworkProfile>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.ManagedDTS, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.ScriptTask, Version=14.0.0.0, Culture=Neutral, PublicKeyToken=89845dcd8080cc91" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
    <Compile Include="ScriptMain.cs">
      <SubType>Code</SubType>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptTask" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptTask" GeneratedNamespace="$safeprojectname" IconIndex=""></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_ST140</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></ProjectItem>
          <ProjectItem
            Name="ScriptMain.cs"
            Encoding="UTF8"><![CDATA[#region Help:  Introduction to the script task
/* The Script Task allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services control flow. 
 * 
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script task. */
#endregion


#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Runtime;
using System.Windows.Forms;
using System.Net;
using System.IO;
using System.Net.Mail;
using System.Collections.Generic;
using System.Net.Mime;
using System.Text;
using System.Text.RegularExpressions;
#endregion

namespace ST_48f665c5ce7f48c1ae7ab664430e6241
{
    /// <summary>
    /// ScriptMain is the entry point class of the script.  Do not change the name, attributes,
    /// or parent of this class.
    /// </summary>
	[Microsoft.SqlServer.Dts.Tasks.ScriptTask.SSISScriptTaskEntryPointAttribute]
	public partial class ScriptMain : Microsoft.SqlServer.Dts.Tasks.ScriptTask.VSTARTScriptObjectModelBase
	{
        #region Help:  Using Integration Services variables and parameters in a script
        /* To use a variable in this script, first ensure that the variable has been added to 
         * either the list contained in the ReadOnlyVariables property or the list contained in 
         * the ReadWriteVariables property of this script task, according to whether or not your
         * code needs to write to the variable.  To add the variable, save this script, close this instance of
         * Visual Studio, and update the ReadOnlyVariables and 
         * ReadWriteVariables properties in the Script Transformation Editor window.
         * To use a parameter in this script, follow the same steps. Parameters are always read-only.
         * 
         * Example of reading from a variable:
         *  DateTime startTime = (DateTime) Dts.Variables["System::StartTime"].Value;
         * 
         * Example of writing to a variable:
         *  Dts.Variables["User::myStringVariable"].Value = "new value";
         * 
         * Example of reading from a package parameter:
         *  int batchId = (int) Dts.Variables["$Package::batchId"].Value;
         *  
         * Example of reading from a project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].Value;
         * 
         * Example of reading from a sensitive project parameter:
         *  int batchId = (int) Dts.Variables["$Project::batchId"].GetSensitiveValue();
         * */

        #endregion

        #region Help:  Firing Integration Services events from a script
        /* This script task can fire events for logging purposes.
         * 
         * Example of firing an error event:
         *  Dts.Events.FireError(18, "Process Values", "Bad value", "", 0);
         * 
         * Example of firing an information event:
         *  Dts.Events.FireInformation(3, "Process Values", "Processing has started", "", 0, ref fireAgain)
         * 
         * Example of firing a warning event:
         *  Dts.Events.FireWarning(14, "Process Values", "No values received for input", "", 0);
         * */
        #endregion

        #region Help:  Using Integration Services connection managers in a script
        /* Some types of connection managers can be used in this script task.  See the topic 
         * "Working with Connection Managers Programatically" for details.
         * 
         * Example of using an ADO.Net connection manager:
         *  object rawConnection = Dts.Connections["Sales DB"].AcquireConnection(Dts.Transaction);
         *  SqlConnection myADONETConnection = (SqlConnection)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Sales DB"].ReleaseConnection(rawConnection);
         *
         * Example of using a File connection manager
         *  object rawConnection = Dts.Connections["Prices.zip"].AcquireConnection(Dts.Transaction);
         *  string filePath = (string)rawConnection;
         *  //Use the connection in some code here, then release the connection
         *  Dts.Connections["Prices.zip"].ReleaseConnection(rawConnection);
         * */
        #endregion


		/// <summary>
        /// This method is called when this script task executes in the control flow.
        /// Before returning from this method, set the value of Dts.TaskResult to indicate success or failure.
        /// To open Help, press F1.
        /// </summary>
		public void Main()
		{
            // TODO: Add your code here
            int vIdCliente = 119;//todo: parametrizar el cliente

            string url, destination;
            //destination = Dts.Variables["Folder_Destination"].Value.ToString() + "\\" + "Report_" + Dts.Variables["ReportParameter"].Value.ToString() + "_" + DateTime.Now.ToString("yyyyMMdd") + ".xls";
            destination = Dts.Variables["Folder_Destination"].Value.ToString() + "\\" + "Report_" + vIdCliente + "_" + DateTime.Now.ToString("yyyyMMdd") + ".xls";
            //url = "http://mexsist006:8080/ReportServer?/Rep_Prueba2:Command=Render&Productkey=" + Dts.Variables["ReportParameter"].Value.ToString() + "&rs:Format=EXCEL";
            //url = "http://localhost:8080/ReportServer?/MyReports/SSIS_Execute_SSRS_Report&rs:Command=Render&Productkey=" + Dts.Variables("ReportParameter").Value.ToString + "&rs:Format=EXCEL";

            //url = "http://mexsist006:8080/ReportServer?/Rep_Prueba2/Repor2_Prueba&rs:Command=Render&rs:Format=EXCEL";//envio sin parametros
            url = "http://mexsist006:8080/ReportServer?/Rep_Prueba2/CronogramaXRef&rs:Command=Render&pIdCliente=" + vIdCliente  + "&rs:Format=EXCEL";//envio con parametros

            if(SaveFile(url, destination))
            {
                EnviaMail(new List<string>() { "aplicaciones@intertraffic.com.mx" }, new List<string>(), new List<string>(), "Reporte diario de operaciones", "adjuton encotrara el reporte de sus operaciones", new List<string>() { destination },
                    "intertraffic.com.mx", "noreplyapp@intertraffic.com.mx", "noreplyapp@intertraffic.com.mx", "+*vMf9bHpd}.@kRt", 587, true);
            }

            Dts.TaskResult = (int)ScriptResults.Success;
		}

        private bool SaveFile(string URL, string Destination)
        {
            try
            {
                //FUNIONAL
                var licount = 1;
                byte[] laBytes = new byte[256];
                FileStream fstr = new FileStream(Destination, FileMode.Create, FileAccess.Write);
                WebRequest server = WebRequest.Create(URL);
                server.Credentials = System.Net.CredentialCache.DefaultCredentials;
                server.Timeout = 600000;
                server.Method = "GET";

                HttpWebResponse ws = (HttpWebResponse)server.GetResponse();
                var stream = ws.GetResponseStream();
                StreamReader reader = new StreamReader(stream);
                do
                {
                    licount = stream.Read(laBytes, 0, 256);
                    fstr.Write(laBytes, 0, licount);
                } while (licount > 0);
                fstr.Flush();
                fstr.Close();
                return true;
            }
            catch (Exception ex)
            {
                return false;
            }


            //Stream str = ws.GetResponseStream();
            //byte[] inBuf = new byte[100000];
            //int bytesToRead = (int)inBuf.Length;
            //int bytesRead = 0;
            //while (bytesToRead > 0)
            //{
            //    int n = str.Read(inBuf, bytesRead, bytesToRead);
            //    if (n == 0)
            //        break;
            //    bytesRead += n;
            //    bytesToRead -= n;
            //}
            //FileStream fstr = new FileStream("ReporteExceltest1.xls", FileMode.OpenOrCreate,FileAccess.Write);
            //fstr.Write(inBuf, 0, bytesRead);
            //str.Close();
            //fstr.Close();

            //WebResponse response = null;
            //Stream remoteStream = null;
            //Stream localStream = null;
            //int bytesProcessed = 0;
            //// Create a request for the specified remote file name
            //WebRequest request = WebRequest.Create(URL);
            //request.Credentials = System.Net.CredentialCache.DefaultCredentials;
            //request.Timeout = 600000;
            //request.Method = "GET";
            //if (request != null)
            //{
            //    // Send the request to the server and retrieve the
            //    // WebResponse object 
            //    response = request.GetResponse();
            //    if (response != null)
            //    {
            //        // Once the WebResponse object has been retrieved,
            //        // get the stream object associated with the response's data
            //        remoteStream = response.GetResponseStream();

            //        // Create the local file
            //        localStream = File.Create(Dts.Variables["Folder_Destination"].Value.ToString() + "\\ReporteExceltest1.xls");

            //        // Allocate a 1k buffer
            //        byte[] buffer = new byte[1024];
            //        int bytesRead;

            //        // Simple do/while loop to read from stream until
            //        // no bytes are returned
            //        do
            //        {
            //            // Read data (up to 1k) from the stream
            //            bytesRead = remoteStream.Read(buffer, 0, buffer.Length);

            //            // Write the data to the local file
            //            localStream.Write(buffer, 0, bytesRead);

            //            // Increment total bytes processed
            //            bytesProcessed += bytesRead;
            //        } while (bytesRead > 0);
            //    }
            //}

            //using (FileStream fs = File.Open(Destination, FileMode.OpenOrCreate, FileAccess.ReadWrite))
            //{
            //    //FtpWebRequest ftp = (FtpWebRequest)FtpWebRequest.Create("ftp://" + Server + ":" + Port + "/" + fileName);
            //    WebRequest server = WebRequest.Create(URL);
            //    //ftp.Credentials = new NetworkCredential(Login, Password);
            //    server.Credentials = System.Net.CredentialCache.DefaultCredentials;
            //    server.Timeout = 600000;
            //    server.Method = "GET";

            //    var res = server.GetResponse();
            //    var bufer = res.GetResponseStream();
            //    byte[] buff = new byte[bufer.Length];
            //    fs.Write(buff, 0, buff.Length);
            //    fs.Close();



            //    //ftp.ContentLength = fs.Length;
            //    //ftp.Proxy = null;
            //    //byte[] buff = new byte[bufer.Length];
            //    //fs.Read(buff, 0, buff.Length);
            //    //fs.Close();
            //    //Stream ftpstream = ftp.GetRequestStream();
            //    //ftpstream.Write(buff, 0, buff.Length);
            //    //ftpstream.Close();
            //}

            //WebRequest server = WebRequest.Create(URL);
            //server.Credentials = System.Net.CredentialCache.DefaultCredentials;
            //server.Timeout = 600000;
            //server.Method = "GET";

            //int contentLen;
            //int buffLength = 2048;
            //byte[] buff = new byte[buffLength];
            //using (FileStream fs = new FileStream(FilePath, FileMode.Create, FileAccess.Write, FileShare.None))
            //{
            //    HttpWebResponse response = (HttpWebResponse)server.GetResponse();

            //    // obtener el stream retornado por el servidor
            //    Stream stream = response.GetResponseStream();

            //    // Leer del buffer 2kb cada vez
            //    contentLen = stream.Read(buff, 0, buffLength);

            //    // mientras existan datos en el buffer
            //    while (contentLen != 0)
            //    {
            //        // escribir el contenido en el stream
            //        fs.Write(buff, 0, contentLen);
            //        contentLen = stream.Read(buff, 0, buffLength);
            //    }
            //}
        }

        private void EnviarCorreo(bool pResultado)
        {
            MailMessage msg = new MailMessage("noreplyapp@intertraffic.com.mx", "aplicaciones@intertraffic.com.mx", "Reporte diario Intertraffic", "Resultado Operacion: " + pResultado);
            var cliente = new SmtpClient("intertraffic.com.mx")
            {
                Credentials = new NetworkCredential("noreplyapp@intertraffic.com.mx", "+*vMf9bHpd}.@kRt"),
                Port = 587,
                EnableSsl = false
            };
            cliente.Send(msg);
        }

        public bool EnviaMail(List<string> pDestinatarios, List<string> pCC, List<string> pCCO, string pTituloMail,string pMensaje, List<string> Archivos, string pSMTP, string pCorreo, string pUser, string pPass, int pPuerto, bool pEnableSSL)
        {
            var vDestinatario = string.Empty;
            var vCC = string.Empty;
            var vCCO = string.Empty;

            foreach (var mail in pDestinatarios)
                vDestinatario = vDestinatario + "," + mail;

            foreach (var mail in pCC)
                vCC = vCC + "," + mail;

            foreach (var mail in pCCO)
                vCCO = vCCO + "," + mail;

            //DepuroCorreos
            vDestinatario = DepuraCadenaCaracterFinal(vDestinatario);
            vCC = DepuraCadenaCaracterFinal(vCC);
            vCCO = DepuraCadenaCaracterFinal(vCCO);

            if (string.IsNullOrEmpty(vDestinatario) || !DepuraCadenaMail(vDestinatario))
                return false;

            var cliente = new SmtpClient(pSMTP)
            {
                Credentials = new NetworkCredential(pUser, pPass),
                Port = pPuerto,
                EnableSsl = pEnableSSL
            };

            // Add the file attachment to this e-mail message.
            if (string.IsNullOrEmpty(vDestinatario)) return false;

            var htmlView = AlternateView.CreateAlternateViewFromString(pMensaje, null, MediaTypeNames.Text.Html);
            var mensaje = new MailMessage(pCorreo, vDestinatario.Trim(), pTituloMail, pMensaje);
            mensaje.BodyEncoding = Encoding.UTF8;

            if (!string.IsNullOrEmpty(vCC)) mensaje.CC.Add(vCC);

            if (!string.IsNullOrEmpty(vCCO)) mensaje.Bcc.Add(vCCO);

            mensaje.AlternateViews.Add(htmlView);

            if (Archivos != null)
                foreach (var archivo in Archivos)
                    if (File.Exists(archivo))
                        mensaje.Attachments.Add(new Attachment(archivo));

            try
            {
                cliente.Send(mensaje);
                mensaje.Attachments.Dispose();
                cliente.Dispose();
                cliente = null;
                return true;
            }
            catch (Exception ex)
            {
                mensaje.Attachments.Clear();
                cliente = null;
                return false;
            }
        }

        private string DepuraCadenaCaracterFinal(string pCorreo)
        {
            if (!string.IsNullOrEmpty(pCorreo))
            {
                string vCaracterFinal = pCorreo.Substring(pCorreo.Length - 1, 1);
                if (vCaracterFinal == ",")
                {
                    pCorreo = pCorreo.Substring(0, pCorreo.Length - 1);
                }
            }
            //var tamañocadena = pCorreo.Length;

            return pCorreo;
        }

        private bool DepuraCadenaMail(string aEmail)
        {
            var emailRegex = new Regex("^(?<user>[^@]+)@(?<host>.+)$");
            var emailMatch = emailRegex.Match(aEmail);

            return emailMatch.Success;
        }

        #region ScriptResults declaration
        /// <summary>
        /// This enum provides a convenient shorthand within the scope of this class for setting the
        /// result of the script.
        /// 
        /// This code was generated automatically.
        /// </summary>
        enum ScriptResults
        {
            Success = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Success,
            Failure = Microsoft.SqlServer.Dts.Runtime.DTSExecResult.Failure
        };
        #endregion

	}
}]]></ProjectItem>
          <ProjectItem
            Name="Project"
            Encoding="UTF16LE"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="4.0" schemaVersion="1.0">
  <msb:PropertyGroup>
    <msb:CodeName>ST_48f665c5ce7f48c1ae7ab664430e6241</msb:CodeName>
    <msb:Language>msBuild</msb:Language>
    <msb:DisplayName>ST_48f665c5ce7f48c1ae7ab664430e6241</msb:DisplayName>
    <msb:ProjectId>{EDB1D1F4-A751-47F3-87F6-1E24AE494FF1}</msb:ProjectId>
  </msb:PropertyGroup>
  <msb:ItemGroup>
    <msb:Project Include="ST_48f665c5ce7f48c1ae7ab664430e6241.csproj" />
    <msb:File Include="Properties\Resources.Designer.cs" />
    <msb:File Include="Properties\Settings.settings" />
    <msb:File Include="Properties\AssemblyInfo.cs" />
    <msb:File Include="Properties\Resources.resx" />
    <msb:File Include="Properties\Settings.Designer.cs" />
    <msb:File Include="ScriptMain.cs" />
  </msb:ItemGroup>
</c:Project>]]></ProjectItem>
          <ProjectItem
            Name="Properties\AssemblyInfo.cs"
            Encoding="UTF8"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("ST_48f665c5ce7f48c1ae7ab664430e6241")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("ST_48f665c5ce7f48c1ae7ab664430e6241")]
[assembly: AssemblyCopyright("Copyright @  2019")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.*")]]]></ProjectItem>
          <ProjectItem
            Name="Properties\Settings.settings"
            Encoding="UTF8"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></ProjectItem>
          <ProjectItem
            Name="Properties\Resources.Designer.cs"
            Encoding="UTF8"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_48f665c5ce7f48c1ae7ab664430e6241.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_48f665c5ce7f48c1ae7ab664430e6241.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="ST_48f665c5ce7f48c1ae7ab664430e6241.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace ST_48f665c5ce7f48c1ae7ab664430e6241.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ST_48f665c5ce7f48c1ae7ab664430e6241.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}]]></ProjectItem>
          <BinaryItem
            Name="ST_48f665c5ce7f48c1ae7ab664430e6241.dll">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
4AESAEUlAAAAAJYIxAjmARMATCUAAAAAhhj6BgYAEwBUJQAAAACRGAAH6wETAAAAAQBcAAAAAgDw
BQAAAQCFBgAAAQA2CAAAAgBYAAAAAwBrAAAABABRBQAABQAhAQAABgBFCAAABwB6AAAACACQBgAA
CQDmBgAACgBOCAAACwCxBgAADABgAAAAAQCQBgAAAQBdBQAAAQDyAwkA+gYBABEA+gYGABkA+gYK
ACkA+gYQADEA+gYQADkA+gYQAEEA+gYQAEkA+gYQAFEA+gYQAFkA+gYQAGEA+gYQAGkA+gYGAMkA
+gYGAPEA+gYVAAEB+gYGAHEAawgjAAkBzAcpABEBtwUvABkB6AM2ANEAQQQ6AHkAVwk+AHkAQQRD
ACkBqwhIACkBqwhOAAwA+gYGAAwA2ABbAAkB0AgBAIEA+gZsAEkBKAJ3AFEBAAh+AEkB8AeEAEkB
KAkBAEkB4QAQAEkBDgKLAGEBpQWRAHEB+gaWAIkA0wCcAIkARAKkAIkAWgQGAIkAGgIGAHkBQQQ6
ACkBqwixAJkA+ga3AKkA+gYQAIEB+ga/AKkA8AfFAKkAAQkBAKkAjAXMAKkA3ADRACkBhgntAAwA
7AbwABQA9Qj/ACkBqwgEARQANAkLAZEBIAIGACkBfgkPAbEAIwQUASkBxwU6AJkBPwAeAZkA+AMk
AZkAUQArAaEB2AAQAJkAsAArAZkAmAgxARwA2ABbALkBkQgPAZkAgQg/AckB+gYQACQA2ABbAMEB
IAIGAKkAIAIGACQAvwYGACkBYAROASkBSgRSASkBcglYAdEB+gYQANEBVAReAeEBXwgLAXEA+gYG
ANEA+gYGAOkBUQFlAekBZQluAdkA+gZ0AfkA+gYGAAgAFACOAQgAGACTASkAcwAmAi4ACwD+AS4A
EwAHAi4AGwAmAi4AIwAvAi4AKwBYAi4AMwBYAi4AOwBYAi4AQwAvAi4ASwBeAi4AUwBYAi4AWwB1
AkMAYwCTAUkAcwAmAmEAewCTAWMAawCTARsAYQCsANcAAwABAAQAAwAAANYG7wEAAMIB9AEAAMgI
+QECAAkAAwACAAoABQABAAsABQACAAwABwBVAPkANwFFAQSAAAABAAAAZBxDXAAAAAAAAAEAAAAE
AAAAAAAAAAAAAAB8AacAAAAAAA4AAAAAAAAAAAAAAIUBawQAAAAABAAAAAAAAAAAAAAAfAHABQAA
AAAOAAAAAAAAAAAAAACFAYAAAAAAAAAAAAABAAAASwcAAAUAAgAAAABTVF80OGY2NjVjNWNlN2Y0
OGMxYWU3YWI2NjQ0MzBlNjI0MQBDb2xsZWN0aW9uYDEATGlzdGAxAEludDMyAGdldF9VVEY4ADxN
b2R1bGU+AGdldF9DQwBwQ0MAVVJMAHBFbmFibGVTU0wAcENDTwBTeXN0ZW0uSU8AcFNNVFAATWlj
cm9zb2Z0LlNxbFNlcnZlci5NYW5hZ2VkRFRTAHZhbHVlX18AbXNjb3JsaWIAZ2V0X0JjYwBTeXN0
ZW0uQ29sbGVjdGlvbnMuR2VuZXJpYwBSZWFkAEFkZABTZW5kAHNldF9NZXRob2QAZGVmYXVsdElu
c3RhbmNlAEZpbGVNb2RlAE1haWxNZXNzYWdlAENyZWRlbnRpYWxDYWNoZQBwTWVuc2FqZQBWYXJp
YWJsZQBJRGlzcG9zYWJsZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRUeXBlRnJvbUhhbmRsZQBTYXZl
RmlsZQBEYXRlVGltZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5SdW50aW1lAFR5cGUARmFpbHVy
ZQBnZXRfQ3VsdHVyZQBzZXRfQ3VsdHVyZQByZXNvdXJjZUN1bHR1cmUAVlNUQVJUU2NyaXB0T2Jq
ZWN0TW9kZWxCYXNlAEFwcGxpY2F0aW9uU2V0dGluZ3NCYXNlAEh0dHBXZWJSZXNwb25zZQBHZXRS
ZXNwb25zZQBDbG9zZQBEaXNwb3NlAENyZWF0ZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBXcml0ZQBD
b21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERl
YnVnZ2FibGVBdHRyaWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVB
dHRyaWJ1dGUAQXNzZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmli
dXRlAEFzc2VtYmx5Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0
cmlidXRlAENvbXBpbGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0
cmlidXRlAEFzc2VtYmx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRUYXNrRW50cnlQb2lu
dEF0dHJpYnV0ZQBBc3NlbWJseUNvbXBhbnlBdHRyaWJ1dGUAUnVudGltZUNvbXBhdGliaWxpdHlB
dHRyaWJ1dGUAQnl0ZQBnZXRfVmFsdWUAdmFsdWUAc2V0X0JvZHlFbmNvZGluZwBTeXN0ZW0uUnVu
dGltZS5WZXJzaW9uaW5nAENyZWF0ZUFsdGVybmF0ZVZpZXdGcm9tU3RyaW5nAFRvU3RyaW5nAFN1
YnN0cmluZwBNYXRjaABGbHVzaABnZXRfTGVuZ3RoAE1pY3Jvc29mdC5TcWxTZXJ2ZXIuU2NyaXB0
VGFzawBNaWNyb3NvZnQuU3FsU2VydmVyLkR0cy5UYXNrcy5TY3JpcHRUYXNrAE5ldHdvcmtDcmVk
ZW50aWFsAERlcHVyYUNhZGVuYUNhcmFjdGVyRmluYWwAU3lzdGVtLkNvbGxlY3Rpb25zLk9iamVj
dE1vZGVsAFNjcmlwdE9iamVjdE1vZGVsAFN5c3RlbS5Db21wb25lbnRNb2RlbABTeXN0ZW0uTmV0
Lk1haWwARW52aWFNYWlsAERlcHVyYUNhZGVuYU1haWwAcFRpdHVsb01haWwAYUVtYWlsAFNUXzQ4
ZjY2NWM1Y2U3ZjQ4YzFhZTdhYjY2NDQzMGU2MjQxLmRsbABzZXRfRW5hYmxlU3NsAEZpbGVTdHJl
YW0AR2V0UmVzcG9uc2VTdHJlYW0AZ2V0X0l0ZW0AU3lzdGVtAFRyaW0ARW51bQByZXNvdXJjZU1h
bgBCb29sZWFuAFNjcmlwdE1haW4ARGVzdGluYXRpb24AU3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lz
dGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rpb24ATWFpbEFkZHJlc3NDb2xsZWN0aW9u
AEF0dGFjaG1lbnRDb2xsZWN0aW9uAEFsdGVybmF0ZVZpZXdDb2xsZWN0aW9uAEV4Y2VwdGlvbgBw
UmVzdWx0YWRvAHBDb3JyZW8ARW52aWFyQ29ycmVvAEN1bHR1cmVJbmZvAHBQdWVydG8AR3JvdXAA
Q2xlYXIAU3RyZWFtUmVhZGVyAGdldF9SZXNvdXJjZU1hbmFnZXIAcFVzZXIAR2V0RW51bWVyYXRv
cgAuY3RvcgAuY2N0b3IAU3lzdGVtLkRpYWdub3N0aWNzAFN5c3RlbS5SdW50aW1lLkNvbXBpbGVy
U2VydmljZXMAU3lzdGVtLlJlc291cmNlcwBTVF80OGY2NjVjNWNlN2Y0OGMxYWU3YWI2NjQ0MzBl
NjI0MS5Qcm9wZXJ0aWVzLlJlc291cmNlcy5yZXNvdXJjZXMARGVidWdnaW5nTW9kZXMAU1RfNDhm
NjY1YzVjZTdmNDhjMWFlN2FiNjY0NDMwZTYyNDEuUHJvcGVydGllcwBnZXRfVmFyaWFibGVzAFNl
dHRpbmdzAElDcmVkZW50aWFscwBzZXRfQ3JlZGVudGlhbHMAZ2V0X0RlZmF1bHRDcmVkZW50aWFs
cwBTeXN0ZW0uVGV4dC5SZWd1bGFyRXhwcmVzc2lvbnMAcERlc3RpbmF0YXJpb3MAQXJjaGl2b3MA
cFBhc3MARmlsZUFjY2VzcwBnZXRfU3VjY2VzcwBnZXRfRHRzAFNjcmlwdFJlc3VsdHMAZ2V0X0F0
dGFjaG1lbnRzAEV4aXN0cwBnZXRfQWx0ZXJuYXRlVmlld3MAQ29uY2F0AE9iamVjdABTeXN0ZW0u
TmV0AGdldF9EZWZhdWx0AHNldF9UYXNrUmVzdWx0AFNtdHBDbGllbnQAQXR0YWNobWVudABnZXRf
Q3VycmVudABzZXRfUG9ydABXZWJSZXF1ZXN0AElDcmVkZW50aWFsc0J5SG9zdABzZXRfVGltZW91
dABNb3ZlTmV4dABTeXN0ZW0uVGV4dABBbHRlcm5hdGVWaWV3AGdldF9Ob3cAUmVnZXgAZ2V0X0Fz
c2VtYmx5AG9wX0VxdWFsaXR5AElzTnVsbE9yRW1wdHkAACVGAG8AbABkAGUAcgBfAEQAZQBzAHQA
aQBuAGEAdABpAG8AbgAAEVwAUgBlAHAAbwByAHQAXwAAA18AABF5AHkAeQB5AE0ATQBkAGQAAAku
AHgAbABzAACAu2gAdAB0AHAAOgAvAC8AbQBlAHgAcwBpAHMAdAAwADAANgA6ADgAMAA4ADAALwBS
AGUAcABvAHIAdABTAGUAcgB2AGUAcgA/AC8AUgBlAHAAXwBQAHIAdQBlAGIAYQAyAC8AQwByAG8A
bgBvAGcAcgBhAG0AYQBYAFIAZQBmACYAcgBzADoAQwBvAG0AbQBhAG4AZAA9AFIAZQBuAGQAZQBy
ACYAcABJAGQAQwBsAGkAZQBuAHQAZQA9AAAhJgByAHMAOgBGAG8AcgBtAGEAdAA9AEUAWABDAEUA
TAAAQWEAcABsAGkAYwBhAGMAaQBvAG4AZQBzAEAAaQBuAHQAZQByAHQAcgBhAGYAZgBpAGMALgBj
AG8AbQAuAG0AeAAAO1IAZQBwAG8AcgB0AGUAIABkAGkAYQByAGkAbwAgAGQAZQAgAG8AcABlAHIA
YQBjAGkAbwBuAGUAcwAAX2EAZABqAHUAdABvAG4AIABlAG4AYwBvAHQAcgBhAHIAYQAgAGUAbAAg
AHIAZQBwAG8AcgB0AGUAIABkAGUAIABzAHUAcwAgAG8AcABlAHIAYQBjAGkAbwBuAGUAcwAAJ2kA
bgB0AGUAcgB0AHIAYQBmAGYAaQBjAC4AYwBvAG0ALgBtAHgAAD1uAG8AcgBlAHAAbAB5AGEAcABw
AEAAaQBuAHQAZQByAHQAcgBhAGYAZgBpAGMALgBjAG8AbQAuAG0AeAAAISsAKgB2AE0AZgA5AGIA
SABwAGQAfQAuAEAAawBSAHQAAAdHAEUAVAAAN1IAZQBwAG8AcgB0AGUAIABkAGkAYQByAGkAbwAg
AEkAbgB0AGUAcgB0AHIAYQBmAGYAaQBjAAArUgBlAHMAdQBsAHQAYQBkAG8AIABPAHAAZQByAGEA
YwBpAG8AbgA6ACAAAAMsAAATdABlAHgAdAAvAGgAdABtAGwAADleACgAPwA8AHUAcwBlAHIAPgBb
AF4AQABdACsAKQBAACgAPwA8AGgAbwBzAHQAPgAuACsAKQAkAABxUwBUAF8ANAA4AGYANgA2ADUA
YwA1AGMAZQA3AGYANAA4AGMAMQBhAGUANwBhAGIANgA2ADQANAAzADAAZQA2ADIANAAxAC4AUABy
AG8AcABlAHIAdABpAGUAcwAuAFIAZQBzAG8AdQByAGMAZQBzAAAAADe81mKuIoVPtDFt0rWUyFMA
BCABAQgDIAABBSABARERBCABAQ4FIAEBEXUHBwQIDg4RPQUgABKAhQUgABKAiQYgARKAjRwDIAAc
AyAADgQAABE9BCABDg4FAAEOHRwGAAMOHBwcBRUSUQEOBSABARMACgcFCB0FEkESRQIKIAMBDhGA
nRGAoQYAARKApQ4FAAASgK0GIAEBEoCtBSAAEoCxBCAAEkUFIAEBEkUHIAMIHQUICAcgAwEdBQgI
BAcBEk0FAAIODg4HIAQBDg4ODgUgAgEODgYgAQESgMUEIAEBAgUgAQESTRUHDA4ODhJVElkSTRUR
XQEODg4ODgICBg4IIAAVEV0BEwAFFRFdAQ4EIAATAAYAAw4ODg4DIAACBAABAg4JAAMSWQ4SgM0O
BQAAEoDNBiABARKAzQUgABKA0QUgABKA1QcVEoDZARJZBSAAEoDhCBUSgNkBEoDlAyAACAUgAg4I
CAUAAgIODgYgARKA7Q4IAAESgPURgPkFIAASgP0HIAIBDhKA/Qi3elxWGTTgiQiJhF3NgIDMkQQA
AAAABAEAAAADBhJtAwYScQMGEhACBggDBhEUBSACAg4OHyAMAhUSUQEOFRJRAQ4VElEBDg4OFRJR
AQ4ODg4OCAIEIAECDgQAABJtBAAAEnEFAAEBEnEEAAASEAMAAAEECAASbQQIABJxBAgAEhAIAQAI
AAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAAKAEAI1NUXzQ4ZjY2
NWM1Y2U3ZjQ4YzFhZTdhYjY2NDQzMGU2MjQxAAAFAQAAAAAWAQARQ29weXJpZ2h0IEAgIDIwMTkA
AEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3JrRGlzcGxheU5hbWUS
Lk5FVCBGcmFtZXdvcmsgNC41ALQAAADOyu++AQAAAJEAAABsU3lzdGVtLlJlc291cmNlcy5SZXNv
dXJjZVJlYWRlciwgbXNjb3JsaWIsIFZlcnNpb249NC4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQ
dWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5I1N5c3RlbS5SZXNvdXJjZXMuUnVudGltZVJl
c291cmNlU2V0AgAAAAAAAAAAAAAAUEFEUEFEULQAAAB0PQAAAAAAAAAAAACOPQAAACAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAgD0AAAAAAAAAAAAAAABfQ29yRGxsTWFpbgBtc2NvcmVlLmRsbAAAAAAA
/yUAIAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEA
EAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgAAABY
QAAAGgQAAAAAAAAAAAAAGgQ0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAAAL0E
7/4AAAEAAAABAENcZBwAAAEAQ1xkHD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAAAQBW
AGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAAAAAA
AACwBHoDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAAFYDAAABADAAMAAwADAAMAA0
AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5AE4A
YQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAAUwBU
AF8ANAA4AGYANgA2ADUAYwA1AGMAZQA3AGYANAA4AGMAMQBhAGUANwBhAGIANgA2ADQANAAzADAA
ZQA2ADIANAAxAAAAPgAPAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADcAMgA2
ADgALgAyADMANgAxADkAAAAAAHAAKAABAEkAbgB0AGUAcgBuAGEAbABOAGEAbQBlAAAAUwBUAF8A
NAA4AGYANgA2ADUAYwA1AGMAZQA3AGYANAA4AGMAMQBhAGUANwBhAGIANgA2ADQANAAzADAAZQA2
ADIANAAxAC4AZABsAGwAAABIABIAAQBMAGUAZwBhAGwAQwBvAHAAeQByAGkAZwBoAHQAAABDAG8A
cAB5AHIAaQBnAGgAdAAgAEAAIAAgADIAMAAxADkAAAAqAAEAAQBMAGUAZwBhAGwAVAByAGEAZABl
AG0AYQByAGsAcwAAAAAAAAAAAHgAKAABAE8AcgBpAGcAaQBuAGEAbABGAGkAbABlAG4AYQBtAGUA
AABTAFQAXwA0ADgAZgA2ADYANQBjADUAYwBlADcAZgA0ADgAYwAxAGEAZQA3AGEAYgA2ADYANAA0
ADMAMABlADYAMgA0ADEALgBkAGwAbAAAAGgAJAABAFAAcgBvAGQAdQBjAHQATgBhAG0AZQAAAAAA
UwBUAF8ANAA4AGYANgA2ADUAYwA1AGMAZQA3AGYANAA4AGMAMQBhAGUANwBhAGIANgA2ADQANAAz
ADAAZQA2ADIANAAxAAAAQgAPAAEAUAByAG8AZAB1AGMAdABWAGUAcgBzAGkAbwBuAAAAMQAuADAA
LgA3ADIANgA4AC4AMgAzADYAMQA5AAAAAABGAA8AAQBBAHMAcwBlAG0AYgBsAHkAIABWAGUAcgBz
AGkAbwBuAAAAMQAuADAALgA3ADIANgA4AC4AMgAzADYAMQA5AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAAKA9AAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==</BinaryItem>
        </ScriptProject>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--Esta sección CDATA contiene la información de diseño del paquete. Esta sección incluye información como, por ejemplo, las coordenadas (x,y), el ancho y el alto.-->
<!--Si edita manualmente esta sección y comete un error, puede eliminarlo. -->
<!--El paquete podrá cargarse normalmente, pero se perderá la información de diseño anterior y el diseñador reorganizará los elementos automáticamente en la superficie de diseño.-->
<Objects
  Version="8">
  <!--Cada uno de los nodos siguientes contiene propiedades que no afectan al comportamiento en tiempo de ejecución.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph">
        <NodeLayout
          Size="145,42"
          Id="Package\ejecutar SSRS"
          TopLeft="457,111" />
      </GraphLayout>
    </LayoutInfo>
  </Package>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>